import streamlit as st
import pandas as pd
import json
import plotly.express as px
import os
import tempfile
from io import BytesIO
from fpdf import FPDF
from datetime import datetime
from utils import authenticate_user, create_user

st.set_page_config(page_title="Crime Pattern Dashboard", layout="wide")

# Session state init
if "authenticated" not in st.session_state:
    st.session_state.authenticated = False
if "role" not in st.session_state:
    st.session_state.role = None
if "username" not in st.session_state:
    st.session_state.username = ""

# Save chart to image safely
def save_plotly_as_image(fig):
    try:
        tmpfile = tempfile.NamedTemporaryFile(delete=False, suffix=".png")
        fig.write_image(tmpfile.name, format="png", engine="kaleido")
        return tmpfile.name
    except Exception as e:
        st.error("‚ùå Failed to save chart image. Charts will not be included in the report.")
        print("Image export failed:", e)
        return None

# Generate PDF
def generate_pdf_report(df, username, chart_paths=[]):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", "B", 16)
    pdf.cell(200, 10, txt="Crime Report Summary", ln=1, align="C")

    pdf.set_font("Arial", size=12)
    pdf.cell(200, 10, txt=f"Generated by: {username}", ln=1)
    pdf.cell(200, 10, txt=f"Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", ln=1)

    pdf.ln(10)

    for path in chart_paths:
        if path:
            pdf.image(path, w=180)
            pdf.ln(10)

    pdf_bytes = BytesIO()
    pdf_output = pdf.output(dest='S').encode('latin-1')
    pdf_bytes.write(pdf_output)
    pdf_bytes.seek(0)
    return pdf_bytes

# Login page

def show_login():
    st.markdown("""
        <style>
        .card {
            width: 100%;
            max-width: 400px;
            margin: auto;
            padding: 2rem;
            background: #f9f9f9;
            border-radius: 12px;
            box-shadow: 0px 4px 20px rgba(0,0,0,0.1);
        }
        </style>
        <div class="card">
        <h2 style="text-align:center">üîê Login</h2>
        </div>
    """, unsafe_allow_html=True)

    username = st.text_input("Username")
    password = st.text_input("Password", type="password")
    role = st.selectbox("Select Role", ["public", "analyst", "law_enforcement"])
    if st.button("Login"):
        user_role = authenticate_user(username, password)
        if user_role == role:
            st.session_state.authenticated = True
            st.session_state.role = role
            st.session_state.username = username
            st.rerun()
        else:
            st.error("Invalid credentials or role mismatch.")

    st.subheader("üìù New User? Sign Up")
    new_username = st.text_input("New Username")
    new_password = st.text_input("New Password", type="password")
    new_role = st.selectbox("Role", ["public", "analyst", "law_enforcement"], key="signup")
    if st.button("Sign Up"):
        if create_user(new_username, new_password, new_role):
            st.success("User created! You can now login.")
            st.rerun()
        else:
            st.warning("Username already exists.")

# Dashboard after login

def show_dashboard():
    st.title("üöî Crime Pattern Analysis Dashboard")

    uploaded_file = st.file_uploader("Upload Crime CSV File", type=["csv"])
    if uploaded_file:
        df = pd.read_csv(uploaded_file)
        st.success("File uploaded successfully")

        # Filters
        crime_types = st.multiselect("Filter by Crime Type", df["crime_type"].unique())
        if crime_types:
            df = df[df["crime_type"].isin(crime_types)]

        st.dataframe(df.head())

        # Visualizations
        st.subheader("üìä Crime Type Distribution")
        fig1 = px.histogram(df, x="crime_type", color="crime_type")
        st.plotly_chart(fig1, use_container_width=True)

        st.subheader("üåç Crime Locations")
        fig2 = px.scatter_mapbox(df, lat="latitude", lon="longitude", color="crime_type",
                                 mapbox_style="open-street-map", zoom=10, height=400)
        st.plotly_chart(fig2, use_container_width=True)

        # Export Report
        chart1_path = save_plotly_as_image(fig1)
        chart2_path = save_plotly_as_image(fig2)
        pdf_bytes = generate_pdf_report(df, st.session_state.username, [chart1_path, chart2_path])

        st.download_button("üìÑ Download PDF Report", pdf_bytes, file_name="crime_report.pdf")

# Main app routing
if st.session_state.authenticated:
    show_dashboard()
else:
    show_login()
